{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI on Edge Device Hardware Platforms","text":"<p>Example workflow for quantizing &amp; compiling custom ML models on Edge Devices.</p>"},{"location":"#overview","title":"Overview","text":"<p>EdgeAIonPlatforms demonstrates how to take trained machine-learning models and run them efficiently on resource-constrained devices such as: HAILO, ORCA, CORAL Edge TPU and STM32 devices. </p> <ul> <li>Model conversion scripts (e.g. pytorch --&gt; ONNX, ONNX \u2192 proprietary)</li> <li>Recommended Dockerization Strategy so that everything is automate in a microservices format for easy scalabilty</li> <li>Customization Instructions to incorporate other models in the same pipeline</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone the repo</li> </ol> <pre><code>\ngit clone https://github.com/alema416/EdgeAIonPlatforms.git\n\ncd EdgeAIonPlatforms\n\n</code></pre> <ol> <li>Build/Pull the Docker Images</li> </ol> <pre><code>\ndocker compose build stm32ai\n\ndocker compose pull degirum_api hailo\n\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#hailo","title":"HAILO","text":"<p>edit configs/optimizer.yaml</p> <pre><code>docker compose run --rm --entrypoint /usr/bin/bash hailo\n</code></pre>"},{"location":"#st-devices","title":"ST Devices","text":"<p>edit configs/quantization_config.yaml</p> <pre><code>docker compose run --rm stm32ai\n</code></pre>"},{"location":"#orcacoral-devices","title":"ORCA/CORAL devices","text":"<p>edit the corresponding .json file</p> <pre><code>docker compose up -d compiler_api\n</code></pre>"},{"location":"Customization/coral/","title":"Pipeline Customization for Raspberry Pi + Coral Edge TPU","text":"<p>Sample config:</p> <pre><code>  \"model_name\": \"model_11\",\n  \"model_version\": 1,\n  \"image_width\": 224,\n  \"image_height\": 224,\n  \"OutputNMSThreshold\": \"0.6\",\n  \"calibration_images\": \"\",\n  \"MaxDetectionsPerClass\": \"100\",\n  \"OutputConfThreshold\": \"0.3\",\n  \"MaxDetections\": \"100\",\n  \"InputQuantEn\": true,\n  \"MaxClassesPerDetection\": \"2\",\n  \"input_pad_method\": \"stretch\",\n  \"OutputSoftmaxEn\": true,\n  \"input_resize_method\": \"bilinear\",\n  \"input_img_norm_enabled\": true,\n  \"input_norm_mean\": \"[0.50463295, 0.46120012, 0.4291694 ]\",\n  \"input_norm_std\": \"[0.18364702, 0.1885083,  0.19882548]\",\n  \"model_format\": \"onnx-fp32\",\n  \"device_type\": [\n    \"tflite-edgetpu-quant\"\n  ],\n  \"upload_zip_cloud\": false,\n  \"output_postprocess_type\": \"Classification\",\n  \"calib_img_path\": \"../../output_files/data/processed/IDID_broken_224/val/\",\n  \"num_calib_imgs\": 256,\n  \"separate_outputs\": true,\n  \"UseRegularNMS\": true\n</code></pre> <p>And the process can be customized by trial &amp; error (no documentation available as per July 2025).</p>"},{"location":"Customization/hailo/","title":"Pipeline Customization for Raspberry Pi + HAILO","text":""},{"location":"Customization/orca/","title":"Pipeline Customization for Raspberry Pi + Orca","text":"<p>Sample config:</p> <pre><code>  \"model_name\": \"model_11\",\n  \"model_version\": 1,\n  \"image_width\": 224,\n  \"image_height\": 224,\n  \"OutputNMSThreshold\": \"0.6\",\n  \"calibration_images\": \"\",\n  \"MaxDetectionsPerClass\": \"100\",\n  \"OutputConfThreshold\": \"0.3\",\n  \"MaxDetections\": \"100\",\n  \"InputQuantEn\": true,\n  \"MaxClassesPerDetection\": \"2\",\n  \"input_pad_method\": \"stretch\",\n  \"OutputSoftmaxEn\": true,\n  \"input_resize_method\": \"bilinear\",\n  \"input_img_norm_enabled\": true,\n  \"input_norm_mean\": \"[0.50463295, 0.46120012, 0.4291694 ]\",\n  \"input_norm_std\": \"[0.18364702, 0.1885083,  0.19882548]\",\n  \"model_format\": \"onnx-fp32\",\n  \"device_type\": [\n    \"n2x-orca1-quant\"\n  ],\n  \"upload_zip_cloud\": false,\n  \"output_postprocess_type\": \"Classification\",\n  \"calib_img_path\": \"/app_ours/data/processed/IDID_broken_224/val/\",\n  \"num_calib_imgs\": 256,\n  \"separate_outputs\": true,\n  \"UseRegularNMS\": true\n</code></pre> <p>And the process can be customized by trial &amp; error (no documentation available as per July 2025).</p>"},{"location":"Customization/stm32/","title":"Pipeline Customization for STM32 Devices","text":"<p>Sample config:</p> <pre><code>general:\n   model_path: \noperation_mode: quantization\n\ndataset:\n   training_path: /home/alema416/dev/work/HI4Lines_Insp/data/processed/IDID_cropped_224/train\n   validation_path: /home/alema416/dev/work/HI4Lines_Insp/data/processed/IDID_cropped_224/val\n   test_path: /home/alema416/dev/work/HI4Lines_Insp/data/processed/IDID_cropped_224/test\n   quantization_path: /home/alema416/dev/work/HI4Lines_Insp/data/processed/IDID_cropped_224/train\n   quantization_split: 0.05\n\npreprocessing:\n   rescaling:\n      scale:  [0.0213538, 0.0208032, 0.0197237]\n      offset: [-2.7478418, -2.4465773, -2.1585231]\n   resizing:\n      aspect_ratio: fit\n      interpolation: bilinear\n   color_mode: rgb\n\nquantization:\n   quantizer: Onnx_quantizer\n   quantization_type: PTQ\n   quantization_input_type: uint8\n   quantization_output_type: float\n   granularity: per_channel\n   extra_options: calib_moving_average\nmlflow:\n   uri: ./experiments_outputs/mlruns\n\nhydra:\n   run:\n      dir: ./experiments_outputs/${now:%Y_%m_%d_%H_%M_%S}\n</code></pre> <p>And the process can be customized for classification, detection, segmentation etc per: https://github.com/STMicroelectronics/stm32ai-modelzoo-services</p>"}]}